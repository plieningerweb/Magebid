<!--
/**
 * @category  Mbid
 * @package   Mbid_Magebid
 * @author    André Herrn <info@magebid.com>
 * @copyright 2010 André Herrn | Netresearch GmbH & Co.KG (http://www.netresearch.de)
 * @link      http://www.magebid.com/
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
*/
-->

<?php

//load trees that we can show the errors after loading the trees above (getEbayChildTreeErrors())
$ebayTreeJson1 = $this->getEbayTreeJson('ebay_category_1');
$ebayTreeErrors1 = $this->getEbayChildTreeErrors();
$ebayTreeJson2 = $this->getEbayTreeJson('ebay_category_2');
$ebayTreeErrors2 = $this->getEbayChildTreeErrors();

?>

<p><?php echo Mage::helper('magebid')->__('Please select only one category and a category which has no child categories anymore. If there is an error message that the old category exists no longer, you can select eBay as category to set no category.'); ?></p>

<table>
	<tr>
		<td>
			<?php if($ebayTreeErrors1): ?>
			<div id="messages">
				<ul class="messages">
					<?php foreach($ebayTreeErrors1 as $error): ?>
					<li class="error-msg">
						<ul>
							<li><?php echo $error; ?></li>
						</ul>
					</li>
					<?php endforeach; ?>
				</ul>
			</div>
			<?php endif; ?>
		</td>
		<td>
			<?php if($ebayTreeErrors2): ?>
			<div id="messages">
				<ul class="messages">
					<?php foreach($ebayTreeErrors2 as $error): ?>
					<li class="error-msg">
						<ul>
							<li><?php echo $error; ?></li>
						</ul>
					</li>
					<?php endforeach; ?>
				</ul>
			</div>
			<?php endif; ?>
		</td>
	</tr>
	<tr>
		<td>
			<div class="entry-edit" style="width:350px;">
			    <div class="entry-edit-head">
			        <h4 class="icon-head head-edit-form fieldset-legend"><?php echo Mage::helper('magebid')->__('Ebay Category 1') ?></h4>
			    </div>
			    <fieldset id="grop_fields">
			        <input type="hidden" name="ebay_category_1" id="ebay-category-1" value="<?php echo $this->getEbayCategory('ebay_category_1') ?>">
			        <div id="ebay-categories-1" class="tree"></div>
			    </fieldset>
			</div>
		</td>
		<td>
			<div class="entry-edit" style="width:350px;">
			    <div class="entry-edit-head">
			        <h4 class="icon-head head-edit-form fieldset-legend"><?php echo Mage::helper('magebid')->__('Ebay Category 2') ?></h4>
			    </div>
			    <fieldset id="grop_fields">
			        <input type="hidden" name="ebay_category_2" id="ebay-category-2" value="<?php echo $this->getEbayCategory('ebay_category_2') ?>">
			        <div id="ebay-categories-2" class="tree"></div>
			    </fieldset>
			</div>
		</td>
		<!--
		<td>
			<div class="entry-edit" style="width:200px;">
			    <div class="entry-edit-head">
			        <h4 class="icon-head head-edit-form fieldset-legend"><?php echo Mage::helper('magebid')->__('Category-specific Features') ?></h4>
			    </div>
			    <fieldset id="grop_fields">
					<div id="form_condition">

					</div>
			    </fieldset>
			</div>
		</td>
		-->
	</tr>
</table>

<?php ?>


<script type="text/javascript">

Ext.EventManager.onDocumentReady(function() {
    var categoryLoader = new Ext.tree.TreeLoader({
       dataUrl: '<?php echo $this->getLoadTreeUrl()?>'
    });

    categoryLoader.createNode = function(config) {
        config.uiProvider = Ext.tree.CheckboxNodeUI;
        var node;
        if (config.children && !config.children.length) {
            delete(config.children);
            node = new Ext.tree.AsyncTreeNode(config);

        } else {
            node = new Ext.tree.TreeNode(config);
        }
        return node;
    };

    categoryLoader.on("beforeload", function(treeLoader, node) {
        treeLoader.baseParams.category = node.attributes.id;
    });

    categoryLoader.on("load", function(treeLoader, node, config) {
        varienWindowOnload();
    });

    var tree = new Ext.tree.TreePanel('ebay-categories-1', {
        animate:false,
        loader: categoryLoader,
        enableDD:false,
        containerScroll: true,
		rootUIProvider: Ext.tree.CheckboxNodeUI,
		selModel: new Ext.tree.CheckNodeMultiSelectionModel(),
		rootVisible: true,
	});

	tree.on('check', function(node) {
	    if(node.attributes.checked) {
            categoryAdd(node.id);
	    } else {
            categoryRemove(node.id);
	    }
	}, tree);

	// set the root node
    var root = new Ext.tree.TreeNode({
        text: 'eBay',
        draggable:false,
        id:1,
		disabled: false,
        uiProvider: Ext.tree.CheckboxNodeUI
    });

	tree.setRootNode(root);
	bildCategoryTree(root, <?php echo $ebayTreeJson1 ?>);
    tree.addListener('click', categoryClick.createDelegate(this));

    // render the tree
    tree.render();
    root.expand();
});

function bildCategoryTree(parent, config){
    if (!config) return null;

    if (parent && config && config.length){
        for (var i = 0; i < config.length; i++){
            config[i].uiProvider = Ext.tree.CheckboxNodeUI;
            var node;
            var _node = Object.clone(config[i]);
            if (_node.children && !_node.children.length) {
                delete(_node.children);
                node = new Ext.tree.AsyncTreeNode(_node);

            } else {
                node = new Ext.tree.TreeNode(config[i]);
            }
            parent.appendChild(node);
            node.loader = node.getOwnerTree().loader;
            if(config[i].children){
                bildCategoryTree(node, config[i].children);
            }
        }
    }
}


Ext.EventManager.onDocumentReady(function() {
    var categoryLoader = new Ext.tree.TreeLoader({
       dataUrl: '<?php echo $this->getLoadTreeUrl()?>'
    });

    categoryLoader.createNode = function(config) {
        config.uiProvider = Ext.tree.CheckboxNodeUI;
        var node;
        if (config.children && !config.children.length) {
            delete(config.children);
            node = new Ext.tree.AsyncTreeNode(config);

        } else {
            node = new Ext.tree.TreeNode(config);
        }
        return node;
    };

    categoryLoader.on("beforeload", function(treeLoader, node) {
        treeLoader.baseParams.category = node.attributes.id;
    });

    categoryLoader.on("load", function(treeLoader, node, config) {
        varienWindowOnload();
    });

    var tree = new Ext.tree.TreePanel('ebay-categories-2', {
        animate:false,
        loader: categoryLoader,
        enableDD:false,
        containerScroll: true,
		rootUIProvider: Ext.tree.CheckboxNodeUI,
		selModel: new Ext.tree.CheckNodeMultiSelectionModel(),
	});

	tree.on('check', function(node) {
	    if(node.attributes.checked) {
            categoryAdd2(node.id);
	    } else {
            categoryRemove2(node.id);
	    }
	}, tree);

	// set the root node
    var root = new Ext.tree.TreeNode({
        text: 'eBay',
        draggable:false,
        id:'1',
        uiProvider: Ext.tree.CheckboxNodeUI
    });

	tree.setRootNode(root);
	bildCategoryTree(root, <?php echo $ebayTreeJson2 ?>);
    tree.addListener('click', categoryClick.createDelegate(this));

    // render the tree
    tree.render();
    root.expand();
});







function categoryClick(node, e){
    if (node.disabled) {
        return;
    }
    node.getUI().check(!node.getUI().checked())
    varienElementMethods.setHasChanges(Event.element(e), e);
};
function categoryAdd(id) {
    $('ebay-category-1').value = id;
    resetConditions(id);
}
function categoryRemove(id) {
	if ($('ebay-category-1').value == id)
	{
		 $('ebay-category-1').value = '';
         unsetConditions();
	}
}

function categoryAdd2(id) {
    $('ebay-category-2').value = id;
}
function categoryRemove2(id) {
	if ($('ebay-category-2').value == id) $('ebay-category-2').value = '';
}

function resetConditions(ebay_category_id)
{
	var conditions_reset_url = '<?php echo $this->getCategoryFeaturesUrl()?>' + 'category_id/'+ebay_category_id+'/';

    request = new Ajax.Request(
    		conditions_reset_url,
            {
             method:'get',
             onSuccess: function(transport) {
				var conditions_array = transport.responseText.evalJSON();
				updateConditionsInputField(conditions_array);
    		  }
             }
        );
}

function updateConditionsInputField(conditions_array)
{
	unsetConditions();
	for (var i=0;i<conditions_array.length;i++)
	{
		$('condition_id').options[i] = new Option(conditions_array[i]['label'], conditions_array[i]['value']);
	}
}

function unsetConditions()
{
	for (var i=$('condition_id').length;i>=0;i--)
	{
		$('condition_id').options[i] = null;
	}
}

</script>

